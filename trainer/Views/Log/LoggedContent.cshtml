@model trainer.ViewModels.LoggedWorkoutViewModel

@{
    ViewBag.Title = "Now Logging";
    Layout = "_Layout";
}

<div>
    <div class="row justify-content-center">
        <div class="col-md-8 col-sm-4 d-flex gap-2 dropdown justify-content-center" style="margin-top: 1rem; margin-bottom: 1rem; color: white">
            <div><h3>Start: @Model.LoggedWorkout.StartTime</h3></div>
            @*Checks if the workout has been finished or if the workout is ongoing*@
            @if (Model.LoggedWorkout.EndTime != TimeOnly.Parse("00:00:00"))
            {
                <div><h3>End: @Model.LoggedWorkout.EndTime</h3></div>
            }
        </div>
    </div>
    
    <form asp-action="AddInfoToLog" asp-controller="Log" method="post">
        <input type="hidden" name="LoggedWorkout.Id" value="@Model.LoggedWorkout.Id"/>
        <div class="col-md-6 col-12 m-auto" id="logWorkout">
            @*Lists the exercises*@
            @foreach (var loggedExercise in Model.LoggedWorkoutHasExercises.OrderBy(lwhe => lwhe.IsOrder))
            {
                var lastLoggedExercise = Model.LastLoggedWorkoutHasExercises.FirstOrDefault(lwhe => lwhe.ExerciseId == loggedExercise.ExerciseId);
                
                <div class="card-body d-flex justify-content-between position-relative logWorkoutItem">
                    <div class="position-absolute top-0 end-0" style="margin-right: 0.3rem ">
                        <svg xmlns="http://www.w3.org/2000/svg" width="1rem" height="1rem" fill="currentColor" class="exerciseInfo" viewBox="0 0 16 16" data-gif-url="@loggedExercise.Exercise.GifUrl">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                            <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l-.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                        </svg>
                    </div>
                    @*Display the name and sets of the exercise*@
                    <div class="align-items-center col-md-6 col-6">
                        <div>
                            <h3 style="margin-top: 0.5rem;">@loggedExercise.Exercise.Name</h3>
                        </div>
                        <div>
                            @if (loggedExercise.Sets > 1)
                            {
                                <h6>@loggedExercise.Sets sets</h6>
                            }
                            else
                            {
                                <h6>@loggedExercise.Sets set</h6>
                            }
                        </div>
                    </div>
                    <div class="d-flex align-items-center gap-1" style="text-align: center">
                        @if (loggedExercise.Exercise.MuscleGroup == "Cardio")
                        {
                            <div>
                                <label for="min-input-@loggedExercise.Id" style="font-size:0.8em;">Minutes</label>
                                <input id="min-input-@loggedExercise.Id" type="number" class="form-control" value="@loggedExercise.Min" placeholder="@(lastLoggedExercise?.Min ?? 0)" 
                                       min="0" max="9999" oninput="validateInput(this)" required name="LoggedWorkoutHasExercises[@loggedExercise.Id].Min">
                            </div>
                        }
                        else
                        {
                            @*Input for adding exercise with sets*@
                            <div>
                                <label for="reps-input-@loggedExercise.Id" style="font-size:0.8em;">Reps </label>
                                <input id="reps-input-@loggedExercise.Id" type="number" class="form-control" value="@loggedExercise.Reps" placeholder="@(lastLoggedExercise?.Reps ?? 0)"
                                       min="0" max="9999" oninput="validateInput(this)" required name="LoggedWorkoutHasExercises[@loggedExercise.Id].Reps">
                            </div>
                            <div>
                                <label for="weight-input-@loggedExercise.Id" style="font-size:0.8em;">Weight</label>
                                <input id="weight-input-@loggedExercise.Id" type="number" class="form-control" value="@loggedExercise.Weight" placeholder="@(lastLoggedExercise?.Weight ?? 0)"
                                       min="0" max="9999" oninput="validateInput(this)" required name="LoggedWorkoutHasExercises[@loggedExercise.Id].Weight">
                            </div>
                        }
                            </div>

                </div>
            }
        </div>
        <div class="row justify-content-center">
            <div class="col-md-8 col-sm-4 d-flex gap-2 dropdown justify-content-center" style="margin-top: 1rem; margin-bottom: 1rem; color: white">
                <button type="submit" class="btn btn-primary" style="width: 6rem;  padding-left: 0.65rem">Finish</button>
            </div>
        </div>
    </form>
</div>

@*Modal for showing exercise gif*@
<div id="modal1" class="modal">
    <img class="modal-content" id="img01">
</div>


@*Ensures that the user wants to leave the page
Also ensures that a user can't leave the page without either logging a workout or deleting the logged workout
Needed to stop users from creating a bunch of empty logged workouts
Included directly in view since it only applies here*@

@section Scripts {
    <script>

    window.onbeforeunload = function() {
        var emptyInputs = $('input').filter(function() { return this.value === "";});
      
        if(emptyInputs.length > 0) {
            return "Are you sure you want to leave this page?";
        }
    };    
    </script>
}
